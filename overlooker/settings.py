"""
Django settings for overlooker project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/

For deployment, see
https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/
"""

import os
import platform

from decouple import config
from pathlib import Path

BASE_DIR = Path(__file__).parent.parent

SECRET_KEY = config('SECRET_KEY')

DEBUG = config('DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = []

AUTH_USER_MODEL = 'registration.User'

# region: Redis

REDIS_CONNECTION_POOL = dict(host='localhost', port=6379, db=10)

# endregion

# region: CELERY

CELERY_BROKER_URL = 'pyamqp://'
CELERY_RESULT_BACKEND = 'redis://'  # db = 0

CELERY_TASK_SERIALIZER = 'pickle'
CELERY_ACCEPT_CONTENT = ['pickle', 'json']
# CELERY_RESULT_SERIALIZER = ['pickle']

CELERY_TIMEZONE = 'UTC'
CELERY_ENABLE_UTC = True

# endregion

# region: rest framework

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticatedOrReadOnly",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.TokenAuthentication",
    ],
    "DEFAULT_FILTER_BACKEND": [
        "django_filters.rest_framework.DjangoFilterBackend",
    ],
}

# endregion

# region: cors

# frontend communication
CORS_ORIGIN_ALLOW_ALL = False
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_WHITELIST = [
    "http://localhost:8080",
    "http://localhost:3000",
    "http://127.0.0.1:9000",
    "http://127.0.0.1:3000",
]

# endregion

# region: djoser

DJOSER = dict(
    # SOCIAL_AUTH_ALLOWED_REDIRECT_URIS=['recieve'],
    # SEND_ACTIVATION_EMAIL=True,
    # SEND_CONFIRMATION_EMAIL=True,
    # PASSWORD_CHANGED_EMAIL_CONFIRMATION=True,
    # USERNAME_CHANGED_EMAIL_CONFIRMATION=True,
    SET_PASSWORD_RETYPE=True,
    PASSWORD_RESET_CONFIRM_RETYPE=True,
    PASSWORD_RESET_SHOW_EMAIL_NOT_FOUND=True,
    ACTIVATION_URL='activate/{uid}/{token}',
    PASSWORD_RESET_CONFIRM_URL='password/reset/{uid}/{token}',
)

# PROTOCOL = 'http://'
DOMAIN = 'localhost:3000'

SIMPLE_JWT = {
    'AUTH_HEADER_TYPES': ('JWT',),
}

# endregion

# region: logging

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'file-formatter': {
            '()': 'utils.logging.formatters.FileFormatter',
            'format': '{levelname} {created} {client_ip} {is_routable} {endpoint} {method} {status_code} {request_size}',
            'style': '{',
        },
        'simple': {
            'format': '({levelname}) {message}',
            'style': '{',
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'formatter': 'file-formatter',
            'filename': '_logs/requests.log',
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
        }
    },
    'loggers': {
        'django.request': {  # logs only  400+
            'handlers': ['file'],
            'propagate': False,
        },
        'info-console': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'info-console-file': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        }
    }
}

# endregion

# region: Application definition

DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

THIRD_PARTY_APPS = [
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_simplejwt',
    'djoser',
    'drf_yasg',
    # 'corsheaders',
]

PROJECT_APPS = [
    'apps.registration.apps.RegistrationConfig',
    'apps.scholar.apps.ScholarConfig',
    'apps.agent.apps.AgentConfig',
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + PROJECT_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'overlooker.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'overlooker.wsgi.application'

# endregion

# region: Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

if 'django' in platform.node():
    DATABASES = {
        'default': {
            'ENGINE': '',
            'NAME': '',
            'HOST': '',
            'PORT': '',
            'USER': '',
            'PASSWORD': ''
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }
# endregion

# region: Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# endregion

# region: Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = False

USE_L10N = False

USE_TZ = False

DATETIME_INPUT_FORMATS = [
    '%d/%m/%Y %H:%M:%S',
    '%d/%m/%Y %H:%M',
]

# endregion

# region: Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATICFILES_DIRS = [BASE_DIR.joinpath("static").as_posix()]
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR.joinpath('static-production').as_posix()

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR.joinpath('media')

# endregion
